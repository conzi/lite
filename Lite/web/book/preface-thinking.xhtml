<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:fk="http://www.xidea.org/ns/lite/example" xml:lang="zh-CN"
	dir="ltr">
	<head>
		<title>模板编程思想介绍</title>
	</head>
	<body>
		<h3>从MVC 模式说起</h3>
		web MVC 模块关系图：
		<img src="webmvc.png" align="left" />
		<p>
			在前一章介绍模板发展的过程中，我们反复提到一个的一个概念，那就是"分"。
			其实，分只是外表，只是方法，并不是我们的最终目的。 MVC的本质不是分，MVC的初衷也不是分工合作。
		</p>
		<p>
			任何时候，检验改革成败的唯一标准就是提高生产率，是的，分的目标也就是简化我们的程序逻辑，提高我们的开发效率。
			然而不合理的分，过度的分，反而会适得其反。增加接口的复杂度，导致沟通成本的上升。降低我们的开发效率。
		</p>
		<p>上面这些文字，目标只有一个，那就是说，"分"不是万能的。不过，事实也告诉我们MVC的分，是成功的：</p>
		<p>
			她首先将程序中最多变的最无害的展现逻辑分离出来；并且明确视图的职责：展示给用户的一个当前状态的快照。
			由于展现只是一个快照，她的改变不会影响程序行为，这种职能的确定，更有利于展现模块向更适合自身的方向发展，进而有了标记语言，模板语言的发展。
			同时，这一过程也把核心逻辑从繁琐的展现逻辑中解脱出来。
		</p>
		<p>
			抽取显示逻辑之后，核心逻辑中依然带有大连与展示衔接的代码，这样，她依然不利于更加合理的核心结构的设计。
			于是，我们从核心逻辑中将与前端交互相关的部分再次抽取，这就是控制逻辑。

			经过两次简化，分别给表现层和核心逻辑减负，让他们可以抛开交互逻辑轻装前行。
		</p>
		<p>
			从上面的MVC介绍我们可以看到，M，V，C三者分离之后，各自的职能都变得更窄。
			特别是View，他貌似被加上了一个readonly关键字，让View变成了一个可以让人放心的模块。
		</p>
		<p>
			其实，我觉得MVC最有价值的一点就是她的视图概念的抽取，视图层因为式面向用户的，面向用户的数据一般都会有较高的冗余。
			我们如果针对这种高度冗余的数据编程，到处重复的代码，稍有不甚就可能出现数据不一致的问题，这无疑将让程序维护迈向地狱。
		</p>
		<p>
			<i>
				与人的交互和与机器交互，是两个个差异很大的问题，面向机器的接口就是应该统一，无冗余无废话。
				然而，面向人的接口，我们的信息就是不断的重复，不断的提示，高度的冗余通常就是造就更好的用户体验的基础。
				然而，程序设计中，冗余就是大忌，这不是存储空间的问题，冗余最容易引发的问题就是数据不一致。
				导致程序的可维护性极低。

				如果要解决这种问题，我们就要设计更高范式的数据模型。 从数据模型上杜绝冗余的可能。
			</i>

		</p>
		<h3>针对原始数据编程</h3>
		<p>
			很多人一说到前端编程，第一印象就是脏累繁。
			只是为什么呢？浏览器的问题这里暂且不论。提一点您可能没有重视的：您可能选错了编程对象。
		</p>
		<p>
			错在哪里？ 问题就在DOM数据是否总是适合作为程序直接控制的数据模型？
			DOM是被生成的数据，被生成的数据通常都容易有更多的冗余（前端数据的冗余也就是jQuery这种面向集合的编程方法流行的原因之一）。
			以前的网页都很简单，我们基本没有抽象数据模型的必要，我们一直都将就着。



			但是随着程序逻辑的不断复杂化。DOM节点作为数据模型，就显得有点臃肿了。很明显，他不够简单抽象，有了太多显示的细节，太多重复的定义。
		</p>
		<p>
			然而目前，前端代码就是在不断反复的折腾这些DOM节点。 如果我们能再文档对象模型之上再次抽取一种更加干净的数据模型，
			我们能直接修改原始数据，直接通过操纵这种用来生成文档对象模型的原始数据，可能一切就会更加简单了。
		</p>
		<p>
			<i>其实针对DOM编程的做法并不一定是错的，但不要一叶障目。有些时候，换一种思维，就会有另外一片天地。</i>
		</p>

		<p>那么面向数据的编程有那些要点呢？</p>
		<ul>
			<li>以数据为中心：去繁就简,返朴归真</li>
			<li>大乱需大治：表现层没有上下文，一切修改从源头出发。</li>
		</ul>

		<p>好了，这就是我们要解决的问题，不要在显示层面编程，要对数据编程。</p>
		<h3>前端模板</h3>
		<p>目前的前端编程还处在一个混沌的时期，前端的业务和展示混杂在一起，浑浑沌沌，暗无天日。
		要解决这个问题前端模板的运用无疑是一个很好的办法。</p>
		<p>然而模板技术再后端发展欣欣向荣，可是再前端就是少有叫好，没有叫座的,为什么呢？</p>
		<p>因为前端模板还没有真正成熟的技术，现行的技术存在严重的问题，这主要包括：</p>
		<ul>
			<li>庞大的实现是个死穴</li>
			<li>重复编译让费系统资源</li>
			<li>环境的苛刻，附加的类库 把它拖累</li>
		</ul>
	</body>
</html>
