<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ex="http://www.xidea.org/ns/lite/example">
	<head>
		<title>模板引擎的前身今世</title>
	</head>
	<body>
		<h3>初识模板-- 等闲识得东风面，万紫千红总是春</h3>
		<p>首先我们来解释一下什么是模板：</p>
		<p>模板是一种用来描述如何把数据变成文本的语言。依然很晕？算了，实例说话：</p>
		<table>
			<tr>
				<th>
					<h6>先模板时代，来自远古问候</h6>
				</th>
				<th>
					<h6>模板时代，我们可以简化为：</h6>
				</th>
			</tr>
			<tr>
				<td>
					<div style="width:300px">
						<ex:code>
							<![CDATA[
#include <stdio.h>
int main(void) {
  printf("Content-Type:");
  printf("text/plain;charset=GBK\n\n");
  say_hello("welcome","火星人","地球");
  return 0;
}
/**
 * 模板输出函数，将参数按照html格式输出
 * @param message_type
 * @param my_name
 * @param your_name
 */
void say_hello(char* message_type,
        char* my_name, 
        char* your_name ) {
  printf("<html>\n");
  printf("<body>\n");
  printf("<h1 class=\"");
  printf(message_type);
  printf("\">");
  printf(your_name);
  printf("您好,我是");
  printf(my_name);
  printf("</h1>\n");
  printf("</body>\n");
  printf("</html>\n");
  return 0;
}]]>
						</ex:code>
					</div>
				</td>
				<td valign="top">
					<div style="width:260px">
						<ex:code>
							<![CDATA[
<html>
  <body>
    <h1 class="${messageType}">
      ${yourName}您好,我是${myName}
    </h1>
  </body>
</html>]]>
						</ex:code>
					</div>
					<p>
						<strong>对比一下两边的代码的可维护性如何？</strong>
					</p>
					<ul>
						<li>代码的多少？</li>
						<li>书写的便捷？</li>
						<li>阅读的清晰？</li>
						<li>排错的简单？</li>
					</ul>
					<p>
						<strong>设计良好的模板语言的基本特征</strong>
					</p>
					<ul>
						<li>源代码接近目标代码</li>
						<li>支持可置换的变量/表达式</li>
						<li>支持条件控制，循环控制逻辑</li>
						<li>源代码一般独立存在</li>
					</ul>
				</td>
			</tr>
		</table>
		<p>
			从这个实例可以看出，模板是一种更加方便的文本生成语言。 他可以通过更加简洁的代码，清晰的描述出数据将如何组织成文本输出。
		</p>

		<p>本节内容就是介绍这个看似简单的改进的进化过程：</p>

		<h3>模板语言的发展 -- 阳清为天，阴浊为地</h3>
		<h4>编程语言的局限 -- 山重水复疑无路</h4>
		<p>
			在网页编程的开始，动态网页通常是通过Perl 甚至
			C/C++直接编码输出的；标记语言和程序语言，展现逻辑和业务代码交织在一起。基本就是：元气未分，浑沌为一。
		</p>
		<p>

			然而这些古老的编程语言并不适合网页编程。网页编程中最大的一部分就是静态文本的输出。

			C/C++虽然强大到可以用来编写操作系统，却完全受不了繁琐的文本处理。

			Perl虽然以强大的文本处理功能著称，但是毕竟走错了方向。
			把文本处理做的很好很强大，强大到他编写的网页程序就没有IDE能识别。
			就算专业的程序员也得绕个大弯，才能明确其简单的真实意图。

			<ul>
				<li>
					页面代码不连贯
					<p>网页代码插入在程序代码中，自身结构被严重破坏；既不利于人工阅读，也不利于IDE识别。</p>
				</li>
				<li>
					字符转义导致可读性极差
					<p>
						标记代码中的换行，引号等特殊字符，必须转义之后才能编入编程语言的字符串常量种。经过这种处理之后的代码看起来非常费力。
					</p>
				</li>
				<li>
					不利于错误提示和自动补全
					<p>一种语言的字符串中嵌入的其他语言，任何IDE无法提供可用的语法补全和错误提示。</p>
				</li>
			</ul>
		</p>
		<h4>模板语言的出现 -- 柳暗花明又一村</h4>
		<p>需要简化编程，提高效率。最常见的办法就是：让更专业的人去作更专业的事。</p>
		<p>我们要设计更专业的语言去描述Web编程领域的那些事。</p>
		<p>于是，出现了一些创新的专用于web的编程技术，如ASP，PHP，JSP。</p>
		<p>
			他们都有一个共同的特点，在代码中可以直接插入静态html代码，不用转义成字符串语法，这简化了输出内容的组合工作。同时也方便IDE的可视化支持。
		</p>
		<p>这些新的技术可以认为是一种模板的雏形，不过他们也都带有未进化完整的程序的尾巴。</p>
		<p>
			他们是在传统编程语言的基础上，改良了她的静态文本输出方式。是模板语言和编程语言的混合体。
			她一方面有编程语言的全部功能。同时有可以方便的输出静态文本。
		</p>
		<p>	
			为了更好的合作，职能分工的逐步细化。我们通常要把核心程序的编写和网页展现逻辑分开。
			甚至把展现逻辑的编写简单化，简单到非程序员如UI设计人员能够处理。
		</p>
		<p>
			这样问题出来了，这些传统的编程语言里面总可以有一些足够你不安的行为,我们可以在JSP里面把你的服务强行关闭，可以在php上删掉你的文件，等等等等。这并不是模板逻辑的要求。
			而且他们的存在也严重影响了开发任务的分工，大家只能根据约定，那些程序里面不放展现模板，那些程序不放业务逻辑。但是，这毕竟只是一个靠不住的约定。
		</p>
		<p>为了概念的清晰，和分工的明确。我们需要在这个基础上作一些改进。</p>
		<p>
			其中一种思路就是：把代码按功能层次分离，逻辑的归逻辑，展示的归展示。逻辑代码可以由专业的业务逻辑程序员去处理。而展示模板代码，可以有专业前端前端工程师处理，甚至可以交由UI设计人员去自己去优化。
		</p>
		<p>
			于是，一些更加纯粹的模板技术出现了，他们不像是在程序逻辑中插入静态输出，更像是静态代码中插入变量和简单的控制语法。
			比如Velocity，FreeMarker，Smarty等等。一个模板技术百家争鸣的时代到了。
		</p>

		<h3>模板语言的未来 -- 天得一以清，地得一以宁</h3>
		<p>然而，这些模板技术只是简化了后端开发的工作，却把前端开发遗忘在原始社会。</p>
		<p>随着浏览器功能的逐渐强大，越来越多的逻辑在前端发生。这就是所谓的Ajax时代。</p>
		<p>
			Ajax提出一个概念，拼凑了一些现有的技术。却没有真正提出任何解决问题的新的更高效的方法。
			他只是把我们前端程序带入一个更加混乱的场景，如同前早期的web编程时代一样：前端的业务，前端的展示，混杂一起，混混沌沌，暗无天日。
		</p>
		<p>我们局部刷新着UI，随时改动着当前的页面的结构，却没有一个真正适合做这种工作的实用技术。</p>
		<p>
			随着这种运用场景的逐渐丰富，一些前端模板的思想开始活跃起来，这就包括JST，Google Clourse
			Template。还有本书介绍的重点：Lite 模板系统。
		</p>
		<p>Lite 模板系统不仅是解决前端模板的问题，她更是一种让模板语言自立门户的开始</p>
		<p>已有的模板系统都是建立在某些特定的编程环境之上，纵使后来有人将某种语法迁移到其他平台，那也都是完整的改写，而且大多都难以长久</p>
		<p>Lite 模板系统有一种平台中立的中间代码的设计，共用相同的编译系统，让不同平台的具体实现有一个共同的起点。</p>
		<p>而且她有一个非常重要的创新：前后端模板集成</p>
		<p>让后端模板给前端模板提供平台，而前端模板将模板编程的模式推向更广的空间。</p>
		<p>通常的前端模板，都有几点软肋:实现类库的累赘，环境搭键麻烦，无法容忍的编译开销。</p>
		<p>
		这方面，Lite 模板实现采用的前后断集成的技术，把前端模板插入在后端模板中，把前端模板环境和编译工作放在后端模板编译中自动完成。
		完全避开了上述问题，让前端模板变得真正适用起来。</p>
		<p>在这种技术的支持下，我们就可以改变我们前端开发的格局：</p>
		<p>以后，前端开发就多了一种重要的开发模式:面向数据的前端编程。</p>

	</body>
</html>
