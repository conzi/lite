<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ex="http://www.xidea.org/ns/lite/example">
	<head>
		<title>模板引擎的前身今世</title>
	</head>
	<body>
		<h3>小往大来，吉亨</h3>
		<p>首先我们来解释一下什么是模板：</p>
		<p>模板是一种用来描述如何把数据变成文本的语言。依然很晕？算了，实例说话：</p>
		<table>
			<tr>
				<th>
					<h6>先模板时代，来自远古问候</h6>
				</th>
				<th>
					<h6>模板时代，我们可以简化为：</h6>
				</th>
			</tr>
			<tr>
				<td>
					<div style="width:300px">
						<ex:code>
							<![CDATA[
#include <stdio.h>
int main(void) {
  printf("Content-Type:");
  printf("text/plain;charset=GBK\n\n");
  say_hello("welcome","火星人","地球");
  return 0;
}
/**
 * 模板输出函数，将参数按照html格式输出
 * @param message_type
 * @param my_name
 * @param your_name
 */
void say_hello(char* message_type,
        char* my_name, 
        char* your_name ) {
  printf("<html>\n");
  printf("<body>\n");
  printf("<h1 class=\"");
  printf(message_type);
  printf("\">");
  printf(your_name);
  printf("您好,我是");
  printf(my_name);
  printf("</h1>\n");
  printf("</body>\n");
  printf("</html>\n");
  return 0;
}]]>
						</ex:code>
					</div>
				</td>
				<td valign="top">
					<div style="width:260px">
						<ex:code>
							<![CDATA[
<html>
  <body>
    <h1 class="${messageType}">
      ${yourName}您好,我是${myName}
    </h1>
  </body>
</html>]]>
						</ex:code>
					</div>
					<p>
						<strong>对比一下两边的代码的可维护性如何？</strong>
					</p>
					<ul>
						<li>代码的多少？</li>
						<li>书写的便捷？</li>
						<li>阅读的清晰？</li>
						<li>排错的简单？</li>
					</ul>
					<p>
						<strong>设计良好的模板语言的基本特征</strong>
					</p>
					<ul>
						<li>源代码接近目标代码</li>
						<li>支持可置换的变量/表达式</li>
						<li>支持条件控制，循环控制逻辑</li>
						<li>源代码一般独立存在</li>
					</ul>
				</td>
			</tr>
		</table>
		<p>
			从这个实例可以看出，模板是一种更加方便的文本生成语言。 他可以通过更加简洁的代码，清晰的描述出数据将如何变成文本输出。
		</p>

		<p>本节内容就是介绍这个看似简单的改进的进化过程：</p>

		<h3>阳清为天，阴浊为地</h3>
		<p>
			在古老的CGI时代，动态网页通常是通过Perl 升至是 C/C++直接编写输出的；标记语言和程序语言，展现逻辑和业务代码交织在一起。基本就是：元气未分，浑沌为一。
		</p>
		<p>
			然而这些古老的编程语言并不适合网页编程。
			
			C/C++虽然强大到可以用来编写操作系统，却完全受不了繁琐的文本处理。
			
			Perl虽然以强大的文本处理功能著称，但是毕竟走错了方向。
			把文本处理做的很好很强大，强大到他编写的网页程序就没有IDE能看懂。
			就算专业的程序员也得绕个大弯，才能明确其简单的真实意图。
			
			<h4>概括一下上面这些编程语言的局限</h4>
			<ul>
				<li>网页代码不连贯
				<p>网页代码插入在程序代码中，自身结构被严重破坏；既不利于人工阅读，也不利于IDE识别。</p>
				</li>
				<li>
				字符转义导致可读性极差
				<p>本来前端</p>
				</li>
			</ul>
		</p>
		<p>然而随着程序逻辑的复杂化，这个混沌的UI层已经难以应付日渐复杂的Web程序需求。</p>

		<p>我们需要简化编程，提高编程语言的效率。要做到这点，最简单的办法就是：“分”。</p>
		<p>把任务更具性质分类，能后不同的分类用各自更专业的编程语言去实现。</p>
		<p>于是，出现了一些创新的web编程技术，如ASP，PHP，JSP。</p>
		<p>
			他们都有一个共同的特点，在代码中可以直接插入最终输出的html代码，简化了输出内容的组合工作。同时也方便IDE的可视化支持。
		</p>
		<p>这些新的技术可以认为是一种模板的雏形，不过他们也都带有未进化完整的程序的尾巴。</p>
		<p>
			这些技术可以看成是模板语言和编程语言的混合体。
			里面总可以有一些足够你不安的行为,我们可以在JSP里面把你的服务强行关闭，可以在php上删掉你的配置文件，等等等等。这并不是模板逻辑的要求。
			而且他们的存在也严重影响了开发任务的分工，大家只能更具约定，那些程序里面不放展现模板，那些程序不放业务逻辑。但是，这毕竟只是一个靠不住的约定。
		</p>
		<p>为了概念的清晰，和分工的明确。我们需要在这个基础上作一些改进。</p>
		<p>
			其中一种思路就是：把代码按功能层次分离，逻辑的归逻辑，展示的归展示。逻辑代码可以由专业的业务逻辑程序员去处理。而展示模板代码，可以有专业前端前端工程师处理，甚至可以交由UI设计人员去自己去优化。
		</p>
		<p>
			于是，一些更加纯粹的模板技术出现了，比如Velocity，FreeMarker，Smarty等等。一个模板技术百家争鸣的时代到了。
		</p>
		<h3>天得一以清，地得一以宁</h3>
		<p>然而，这些模板技术只是简化了后端开发的工作，却把前端开发遗忘在原始社会。</p>
		<p>随着浏览器功能的逐渐强大，越来越多的逻辑在前端发生。这就是所谓的Ajax时代。</p>
		<p>
			Ajax提出一个概念，拼凑了一些现有的技术。却没有真正提出任何解决问题的有效办法。
			他只是把我们前端程序带入一个更加混乱的场景，如同前面提到的CGI时代一样：前端的业务，前端的展示，混杂一起，混混沌沌，暗无天日。
		</p>
		<p>我们局部刷新着UI，随时改动着当前的页面的结构，却没有一个真正适合做这种工作的实用技术。</p>
		<p>
			随着这种运用场景的逐渐丰富，一些前端模板的思想开始活跃起来，这就包括JST，Lite，Google Clourse
			Template。
		</p>

	</body>
</html>
