<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:c="http://www.xidea.org/lite/core"
	xmlns:x="http://www.xidea.org/lite/example">
	<head>
		<title>Lite模板参考</title>
		<c:include path="$page" xpath="//xhtml:head/*" />
		<link href="default.css" rel="stylesheet" type="text/css" />
		<link href="../codemirror/codemirror.css" rel="stylesheet" type="text/css" />
		<link href="../codemirror/default.css" rel="stylesheet" type="text/css" />
		<script src="../codemirror/codemirror.js" />
		<script src="../codemirror/overlay.js" />
		<script src="../codemirror/javascript.js" />
		<script src="../codemirror/xml.js" />
		<c:extension namespace="http://www.w3.org/1999/xhtml">
			//<![CDATA[
    function parseA(node){//连接简写，没有文本的时候，直接使用href作为文本节点
    	var href = node.getAttribute('href');
    	if(href && node.firstChild == null){
    		node.appendChild(node.ownerDocument.createTextNode(href));
    	}
    	if(/\.xhtml/.test(href)){
    		var uri = this.createURI(href);
    		var root = this.config && this.config.root;
    		var file = root && new java.io.File(new java.io.File(root),uri.path);
    		if(root && uri.scheme == 'lite' && !file.exists()){
    			var style = node.getAttribute('style');
    			style += (style? ';':'')+'color:#333';
    			node.setAttribute('style',style);
    		}
    	}
    	this.next(node);
    }
    //]]>
		</c:extension>
		<c:extension namespace="http://www.xidea.org/lite/example">
			//<![CDATA[
var style = 'border: 1px solid #DFECF1;'
    			+'font-family:"Courier New",monospace;'
    			+'padding:4px;margin:4px;'
    			+'font-size:12px;overflow:auto;'
    			+'background-color:#EEE;border:1px solid #222;';
function parseCode(node){
    //代码高亮组件
    var ts = [];
    var text = String(node.textContent || node.text);
    text = text.replace(/^\s*[\r\n]+|[\r\n]+\s*$/g,'');
    text = text.split(/\r\n?|\n/);
    var len = text.length;
    text = text.join('\n');
    while(true){
    	var text2 = text.replace(/^[\t ]/mg,'');
    	if(text.length - text2.length != len){
    		break;
    	}
    	text = text2;
    }
	function encodeString(a){
		return (0x10000 + a.charCodeAt()).toString(16).replace('1','\\u')
	}
	
	text = text.replace(/[\\"\r\n<]/g,encodeString)
	text = '"'+text+'"';
	var varName = node.getAttribute("var");
	
	if(varName){
		this.append("<script>" + varName+'=' +text+";<\/script>")
	}else{
		var model = node.getAttribute("model");
		if(model){
			if(/^\s*\{$/.test(model)){
				model = '"'+model.replace(/[\\"\r\n<]/g,encodeString)+'"'
			}
			model = ','+model+'';
		}else{
			model='';
		}
		this.append("<div class='code'><script>renderSource("+text+model+");<\/script></div>")
	}
};
//]]>
		</c:extension>
		<style>
			.cm-lite-el{ color:#d30;}
			.cm-lite-tag{
			color:#9933FF;font-weight:bold;}
		</style>
		<script>
			//<![CDATA[
		CodeMirror.defineMode("litexml", function(config, parserConfig) {
		  var litexmlOverlay = {
		    token: function(stream, state) {
		      if (stream.match("c:")) {
		        while ((ch = stream.next()) != null)
		          if (!/\w/.test(ch)) break;
		        return "lite-tag";
		      }else if (stream.match(/^(?:\$\!?\{)/)) {
		        while ((ch = stream.next()) != null)
		          if (ch == "}") break;
		        return "lite-el";
		      }
		      while (stream.next() != null && !stream.match(/^\$\!?\{/, false)) {}
		      return null;
		    }
		  };
		  return CodeMirror.overlayParser(CodeMirror.getMode(config, parserConfig.backdrop || "xml"), litexmlOverlay);
		});
		var mirrors = [];
		var jsons = [];
		function placeMirror(node){
			var s = document.getElementsByTagName('script');
			var s = s[s.length-1];
			s.parentNode.appendChild(node);
		}
		function renderSource(text,json){
			if(json){
				document.write("<div class='runner' onclick='runExample(jsons["+jsons.length+"],mirrors["+mirrors.length+"].getValue())'>执行</div>");
				jsons.push(json);
			}
			var mirror =  CodeMirror(placeMirror, {
  				value: text,
  				//readOnly :true,
  				mode:  {name:/^\s*</.test(text)?"litexml":"javascript",json:true}
			});
			mirrors.push(mirror);
			return mirror;
		}
		function updateMirror(){
			var i= mirrors.length;
			while(i--){
				mirrors[i].refresh();
			}
		}
		function showNext(thiz,n,show,hide){
			while(n = n.nextSibling){
				if(n.nodeType == 1){
					if(n.style.display=='none'){
						n.style.display = 'block';
						thiz.innerHTML = hide;
						updateMirror();
					}else{
						n.style.display = 'none';
						thiz.innerHTML = show;
					}
					break;
				}
			}
		}
		//]]>
		</script>
	</head>
	<body>
		<div id="main">
			<div id="header">
				<div class="logo" onclick="location = 'index.xhtml'">
					<c:for var="item"
						list="${
  [
    [0,0,19,100],
    [0,81,42,19],
    [23,0,19,19],
    [23,23,19,54],
    [46,0,42,19],
    [46,23,19,77],
    [69,81,19,19]
  ]
  }">
						<div
							style='left:${item[0]}px;top:${item[1]}px;width:${item[2]}px;height:${item[3]}px;'>&#160;</div>
					</c:for>
				</div>
				<h1>
					<c:include path="$page" xpath="//xhtml:title/text()" />
				</h1>
				<div class="line" />
			</div>
			<div id="content">
				<c:include path="$page" xpath="//xhtml:body/node()" />
			</div>
			<div id="footer"></div>
		</div>
		<div id="menu">
			<h3>入门</h3>
			<ul>
				<li>
					<a href="index.xhtml#what">什么是模板</a>
				</li>
				<li>
					<a href="index.xhtml#install">Lite模板如何安装</a>
				</li>
			</ul>

			<h3>表达式参考</h3>
			<ul>
				<li>
					<a href="el.xhtml#">什么是表达式</a>
				</li>
				<li>
					<a href="el.xhtml#var">值:变量/..</a>
				</li>
				<li>
					<a href="el.xhtml#op">操作符与函数</a>
				</li>
				<li>
					<a href="el-function.xhtml">内置函数参考</a>
				</li>
			</ul>

			<h3>模板语法参考</h3>
			<ul>
				<li>
					<a href="syntax.xhtml">模板语法概述</a>
				</li>
				<li>
					<a href="syntax-out.xhtml">输出语法[\${},\$!{},\$#{}]</a>
				</li>
				<li>
					<a href="syntax-if.xhtml">条件判断[c:if]</a>
				</li>
				<li>
					<a href="syntax-choose.xhtml">分支选择[c:choose]</a>
				</li>
				<li>
					<a href="syntax-for.xhtml">四种循环[c:for]</a>
				</li>
				<li>
					<a href="syntax-extends.xhtml">模板继承[c:extends]</a>
				</li>
				<li>
					<a href="syntax-include.xhtml">模板包含[c:include]</a>
				</li>
				<li>
					<a href="syntax-var.xhtml">变量申明[c:var]</a>
				</li>
				<li>
					<a href="syntax-def.xhtml">模板函数申明[c:def]</a>
				</li>
				<li>
					<a href="syntax-client.xhtml">前端模板函数申明[c:client]</a>
				</li>
				<li>
					<a href="syntax-extension.xhtml">自定义扩展[c:extension]</a>
				</li>
			</ul>
			<h3>常见问题</h3>
			<ul>
				<li>
					<a href="newer.xhtml">致初学者</a>
				</li>
				<li>
					<a href="badcase.xhtml">Bad Case(XML)</a>
				</li>
			</ul>
			<h3>二次开发参考</h3>
			<ul>
				<li>
					<a href="dev-extension.xhtml">语法扩展</a>
				</li>
				<li>
					<a href="dev-function.xhtml">函数扩展(PHP)</a>
				</li>
				<li>
					<a href="dev-function.xhtml">函数扩展(Java)</a>
				</li>
			</ul>
		</div>
		<div class="dialog">
			<div class="mask"/>
			<div id="exampleRunner">
				<div class="head"> ===模板测试 ===<a class="close" onclick="closeExample()">X</a></div>
				<div class="jsonSource">
					<h5>数据模型</h5>
					<script>
						var jsonEditor = CodeMirror(placeMirror, {
								value: '',
								lineNumbers: true,
								mode: {name:"javascript",json:true}
						});
					</script>
				</div>
				<div class="templateSource">
					<h5>模板代码</h5>
					<script>//<![CDATA[
		var templateEditor = CodeMirror(placeMirror, {
			value: '',
			lineNumbers: true,
			mode: {name:"litexml"}
		});
					//]]>
					</script>
				</div>
				<div class="resultSource" id="exampleResult">
					<h5>结果输出</h5>
					<script>//<![CDATA[
		var resultEditor = CodeMirror(placeMirror, {
			value: '',
			readOnly:true,
			lineNumbers: true,
			mode: {name:"litexml"}
		});
		
		var exampleRunner = document.getElementById("exampleRunner");
		var exampleResult = document.getElementById("exampleResult");
			
		function closeExample(){
			exampleRunner.parentNode.style.display = 'none';
		}	
		function runExample(json,template){
			exampleRunner.parentNode.style.display = 'block';
			exampleResult.style.display = 'none';
			if(typeof json != 'string'){
				json = JSON.stringify(json);
			}
			jsonEditor.setValue(json);
			templateEditor.setValue(template);
		}
		function runTemplate(){
			try{
				var js = jsonEditor.getValue();
				var data = window.eval('('+js+')');
			}catch(e){
				alert("测试失败：模拟数据异常："+e);
				return;
			}
			try{
				var ts = templateEditor.getValue();
				var tpl = liteTemplate(ts);
			}catch(e){
				alert("测试失败：模板编译异常："+e);
				return;
			}
			try{
				var result = tpl.render(data);
			}catch(e){
				alert("测试失败：模板运行异常："+tpl.render+e);
				return;
			}
			showResult(result);
		}
		function showResult(result){
			exampleResult.style.display = 'block';
			resultEditor.setValue(result);
			var n = 0;
			var i = setInterval(function a(){
				exampleResult.style.opacity = n/10;
				if(n++>10){
					clearInterval(i);
				}
			},100)
		}
		function compileToJS(){
			try{
				
				var context = new ParseContext();
				var ts = templateEditor.getValue();
				context.parse(context.loadXML(ts));
				var litecode = context.toList();
				var pt = new JSTranslator();//'.','/','-','!','%'
				pt.liteImpl = 'lite__impl_';//avoid inline jslib 
				var jscode = pt.translate(litecode);
			}catch(e){
				alert("测试失败：模板编译异常："+e);
				return;
			}
			showResult(jscode);
		}
		function compileToPHP(){
			try{
				var context = new ParseContext();
				var ts = templateEditor.getValue();
				context.parse(context.loadXML(ts));
				var litecode = context.toList();
				var pt = new PHPTranslator("/test.xhtml".replace(/[\/\-\$\.!%]/g,'_'));//'.','/','-','!','%'
				var phpcode = pt.translate(litecode);
			}catch(e){
				alert("测试失败：模板编译异常："+e);
				return;
			}
			showResult(phpcode);
		}
		function compileToLite(){
			try{
				var context = new ParseContext();
				var ts = templateEditor.getValue();
				context.parse(context.loadXML(ts));
				var litecode = context.toList();
				var litecode = stringifyJSON(litecode);
			}catch(e){
				alert("测试失败：模板编译异常："+e);
				return;
			}
			showResult(litecode);
		}
		
		//]]>
					</script>
				</div>
				<div class="toolbar">
						<input type="button" value="编译(JS)" onclick="compileToJS()"/>
						<input type="button" value="编译(PHP)" onclick="compileToPHP()"/>
						<input type="button" title="lite" value="编译(Java)" onclick="compileToLite()"/>
						<input type="button" value="运行" onclick="runTemplate()"/>
				</div>
			</div>
		</div>
		<script src="../boot.js"/>
		<!--  
		<script src="/scripts/boot.js"/>
		-->
		<script>
		if(!this.ParseContext){
			$import('org.xidea.lite.web:*',true);
			$import('org.xidea.lite.impl.js:*',true);
			$import('org.xidea.lite.impl.php:*',true);
			$import('org.xidea.lite.parse:*',true);
			$import('org.xidea.lite.util:stringifyJSON',true);
		}
		</script>
		
	</body>
</html>
