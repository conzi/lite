<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ex="http://www.xidea.org/ns/lite/example">
	<head>
		<title>发挥前端模板的优势</title>
	</head>
	<body>
		<h2>前端模板可以做什么？</h2>
		<p>
			自从前端Ajax概念开始炒作。我们的前端页面就不再简单了，有丰富的页内交互需求；
			经常提到的前端无请求刷新，就需要大量纯前端的页面重组。
		</p>
		<p>
			遇到类似问题，我们通常有两个解决办法：</p>
			<ul>
				<li>前端通过脚本生成html，局部替换网页。</li>
				<li>直接向后端请求，后端通过后端模板拼凑html，生成网页数据，再交给前端做局部替换。</li>
			</ul>
		<p>
			第一种方法，我们需要在前端使用javascript拼接一大堆网页代码，前端代码可维护性极低；
			方法二我们虽然可以借助后端的模板，简化页面生成的工作，但是这种前端的工作，非得后端过一下，未免有点隔靴搔痒的感觉。
		</p>

		<p>那么还有别的办法吗？当能有，我们的模板居然可以工作在后端，为什么不把他拉到前端来试试呢？</p>
		<p>对，这就是前端模板的运用场景，在前端无刷新局部更新展现数据。你可以通过Ajax请求获取后端的数据完成模板渲染，也可以直接使用前端的数据模型完成模板渲染。</p>
		
		<h3>前端模板的弊端</h3>
		<p>
			但是只要提到模板前端化，就必然会遇到如下问题：</p>
			<ul>
				<li>庞大的编译支持类库</li>
				<li>重复编译浪费系统资源</li>
				<li>环境的苛刻，附加的类库，让前端工程师避而远之</li>
				<li>或者我们需要运行一个小工具，每次测试的时候都手动跑一次编译（Google Closure做法），麻烦</li>
			</ul>
		<p>
			其实这些问题都可以借助后端模板去解决，我们可以把前端模板嵌入在后端模板中；
			每次模板修改的时候，后端模板将自动编译，这时候，直接将前端模板翻译成最终的js函数。OK，一切问题都解决了。
		</p>

		<h3>面向数据的前端编程</h3>
		<p>如果我们前端也能够使用模板，那么，我们前段也就可以实现面向数据的编程模式。
		如此一来，我们就可以通过简化编程对象的方式简化我们的程序结构。</p>
		<p>光说不练让人头晕，给个具体的实例吧。</p>
		<h4>联系人分组管理实例</h4>
	</body>
</html>
