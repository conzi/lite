#labels Featured
===JSEL简介===
JSEL是一个兼容 JavaScript 运算规则的简单的表达式解释引擎。

==== 基本特征 ====
  * 运算规则基于JavaScript。
  * 支持变量，常量(基础类型/数字/对象字面量)，ECMA全局函数/对象，基本运算符。
  * 不支持对上下文有影响的赋值性质的操作符号或ECMA函数
    如：~~++,--,=,+=,/=,等等~~
  * 不支持类型相关操作符号
    如：~~new instanceof type~~
  * 不支持正则表达式相关函数
    引擎设计考虑不同平台下的兼容性，所以暂时不考虑正则支持。
  * 引擎实现的简单高效
    程序体积非常小（JAR文件只有22k，同类工具OGNL 168k）。
  * 可扩展
    支持函数扩展，操作符别名定义，操作符定义。

==== 适用场合 ====
  * 模板引擎的表达式实现。
    如[LITE]采用的默认表达式引擎就是JSEL。
  * 嵌入其他对文件大小要求苛刻环境。
    如手机软件，webstart小程序。
  * 数学表达式计算
    可用于最终用户定义简单运算规则。
  * 规则引擎的表达式需求
    您可以在JSEL基础上扩展业务相关的操作符。或者函数调用。

==== 基本用法 ====
{{{
import java.util.HashMap;
import org.xidea.el.Expression;
import org.xidea.el.ExpressionFactory;

public class JSELTest {
    private ExpressionFactory factory = ExpressionFactory.getInstance();

    /**
     * 表达式函数（与对象绑定时，可以不申明为　static）
     */
    public int testAdd(int i,int j){
        return i+j;
    }
    public void testExpression(){
        Expression el = factory.create("12 * 60 + 100");
        Object result1 = el.evaluate(null);
        System.out.println("result1");
        System.out.println(result1);
    }
    public void testMapContext(){
        Expression el = factory.create("var1 +2 * var2 + obj.testAdd(1,2)");
        HashMap<String, Object> context = new HashMap<String, Object>();
        context.put("var1",111);
        context.put("var2",222);
        //设置对象
        context.put("obj",this);
        Object result21 = el.evaluate(context);//555
        System.out.println("result21:");
        System.out.println(result21);
        
        //修改一下 变量
        context.put("var2",333);
        Object result22 = el.evaluate(context);//777
        System.out.println("result22:");
        System.out.println(result22);
    }
    public void testFunction(){
        Expression el = factory.create("100 + testAdd(1,2)");
        Object result3 = el.evaluate(this);
        System.out.println("result3");
        System.out.println(result3);
    }
    public static void main(String[] args){
        JSELTest test = new JSELTest();
        test.testExpression();
        test.testMapContext();
        test.testFunction();
    }
}

}}}

<a name="OP"/>
==== 操作符支持 ====

 * 属性获取
{{{
. , []
}}}
 * 四则运算：
{{{
+，-，*，/
}}}
 * 取模运算：
{{{
%
}}}
 * 正负运算：
{{{
+，-
}}}
 * 比较运算
{{{
<，>,>=,<=,==，!=,===,!===
}}}
 * 布尔运算
{{{
!，&&，||
}}}
 * 按位运算
{{{
&,^,|,~
}}}
 * 三目运算
{{{
xxx?yy:zz
}}}
 * 函数调用
{{{
()
-----
parseInt("234");//全局函数语法：
"abc".indexOf("bc")//成员函数调用语法：
}}}
 * 优先级控制括弧
{{{
（）
}}}

 * List构造器
{{{
[1,3,var1,'234']//(生成ArrayList)
}}}

 * Map构造器
{{{
{"key1":1,"key2":[item1,item2]}//生成HashMap
}}}




==== 表达式计算性能 ====

  * 对于常见表达式计算，暂时还没有做相关性能测试。但是鉴于其基于逆波兰式这种简单的运算模型，他的性能应该会比较理想。


== 下载 ==
 * JSEL：[http://code.google.com/p/lite/downloads/list]