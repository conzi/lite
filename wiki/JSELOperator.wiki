==== 基本原则　====
  * 兼容ECMA262-3标准
    JavaScript 运算规则充分发挥了动态语言简单灵活的特点，同时它在前端工程师中有普遍的用户基础，是一个很好的选择。
  * 不支持对上下文有影响的赋值性质的操作符号或ECMA函数
    如：~~++,--,=,+=,/=,等等~~
  * 不支持类型相关操作符号
    如：~~new instanceof typeof ~~

==== 运算符支持清单 ====
JSEL 运算符优先级，运算行为均与JavaScript完全保持一致。
JavaScript 运算符号优先级参考[https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Operator_Precedence]
 * 属性获取
{{{
. , []  　　　//两种取属性模式功能相同，［］可以用来获取动态属性。
}}}
 * 四则运算：
{{{
+，-，*，/　　
}}}
 * 取模运算：
{{{
%　　　　　　　
}}}
 * 正负运算：
{{{
+，-　　　　　　
}}}
 * 比较运算
{{{
<，>,>=,<=,==，!=,===,!===　　　//=== !=== 与　== != 的基本区别是，不会做类型转换
}}}
 * 布尔运算
{{{
!，&&，||
}}}
 * 按位运算
{{{
&,^,|,~
}}}
 * 三目运算
{{{
xxx?yy:zz
}}}
 * in 操作符
{{{
a in map ? true:false
同JavaScript in 操作。
对Java程序员来说，不同于 Collection的contains 方法， 而是类似 Map的containsKey方法。对数组的in操作
}}}

 * 函数调用
{{{
()
-----
parseInt("234");//全局函数语法：
"abc".indexOf("bc")//成员函数调用语法：
}}}
 * 优先级控制括弧
{{{
（）
}}}

 * List构造器
{{{
[1,3,var1,'234']//(生成ArrayList)
}}}

 * Map构造器
{{{
{"key1":1,"key2":[item1,item2]}//生成HashMap
}}}