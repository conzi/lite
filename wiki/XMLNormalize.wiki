#labels Phase-Requirements
#xml 容错标准

== 为什么需要XML容错 ==

XML 编码的时候, 有很多过于严谨的限制, 这会让普通的前端工程师难以接受.
XML 容错的主要目的,就是为了降低XML编写的门槛,提高XML编程体验.
同时,我们可以通过错误提示,让大多数前端工程师不严谨的XML书写风格得以渐进改良.

标准实现见: http://lite.googlecode.com/svn/trunk/Lite/src/main/org/xidea/lite/impl/XMLNormalizeImpl.java


== 容错主题 ==

=== XML文本容错 ====
  * 文本值中的 && < 字符
    # 一旦出现不是有效字符实体的& 一律转化为&amp;
       例如 运算符:&& 参数连接符 & (后续字符不能组合为一个有效的字符实体定义)
    # XML 属性值中一旦出现字符'<',一律转化为&lt;
    # 普通XML文本中,一旦出现不是合法的标签起始('<' 后面不是有效的id), 一律转化为&lt;
       小技巧: 运算符 < 后面加个空格, 既不会认为是标签起始.

  * 未申明字符实体容错
    # 内置一些常见的字符实体,如&nbsp;&copy; 将这些字符实体直接转化为不需要定义的unicode字符实体: &#160;&#169;

==== 属性容错 ====
  * 没有括弧的属性
     自动增加括弧
  * 无值属性
    自动设值为属性名,如:disable => disable="disable"
  * 重复属性
    警告,并自动忽略后定义的属性
  * xmlns 容错
    # 大小写容错, 对于一些html中,xmlns 用大写XMLNS ,警告并自动转小写
    # Lite XML 名称空间早期版本自动转为最新版本
  * xml 名称空间未申明
    通过内置默认XML名称空间自动申明.
  * 文本容错
    见:XML文本容错




=== 标签容错 ===
  * html 允许不被关闭的标签自动关闭
    有:meta|link|img|br|hr|input
  * 关闭标签大小写兼容
    比如开始标签是P 发现结束标签为p,警告并自动兼容
  * 多根节点补重默认共有根节点.
    如果发现文档有多个跟节点,自动加上默认根节点.
    如: 
{{{
      <h3>...</h3><p>..</p>
      => <c:block ...><h3>...</h3><p>..</p></c:block>
}}}
=== doctype/注释 容错 == 
  * html5 doctype
    html5 的doctype 申明常用小写, 这里会自动吧他转成大写:
    <!doctype html> =><!DOCTYPE html>
  * 注释
    注释中不能出现的 -- 警告,并自动在中间添加一个空格,回避语法错误.
  * IE条件注释
    将条件注释内容,自动转化为$!{content} 方式,确保条件注释不被忽略???(有待改进).

== 其他 ==
   * xml 位置标柱
     通过c:__i 属性,标柱当前节点的位置信息
   * xml 名称空间属性标柱
     通过 | 分隔符,将带名称空间的属性,添加到位置信息后面(主要用于控制重要xml属性的顺序(java实现中,xml属性没有顺序,javascript实现可以忽略这点)).
     