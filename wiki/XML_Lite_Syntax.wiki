#labels Featured,Phase-Design
==基本概念==
  ==== 表达式====
    类似JSP2.0中引入的EL，表达式是一个简单的运算模型，具有只读的特征。Lite默认实现中，采用的是JSEL。这是一个基于JavaScript运算规则的表达式计算引擎。
  ==== 控制标签====
    类似JSP中的标记库，语法上也与JSTL类似，但是更加简单。
== 输出语法 ==
 ==== 文本内表达式 ====
  * 示例:
{{{
${user.name}。
}}}
  * 功能:
    出现在XML文档的文本节点中，输出表达式值，并*编码*其xml标记。
  * 说明:
    这个输出是自动编码的，若需要原始文本输出，需要使用：<c:out value="${html}"/>标签。
    模版表达式求值，是一个基于模板上下文数据的读值和简单只读运算的过程。
    在JavaScript中。其功能类似于
{{{
function(el){with(context){return eval(el)})
}}}

 ==== 属性内表达式 ====
  * 示例:
{{{
<input type="button"
onclick="${clickScript}"
onmouseover="${overScript}"/>
}}}
  * 功能:
    输出表达式值（编码），但是如果整个属性节点的值为null，整个节点将不被输出。
  * 说明:
    与直接的表达式的区别是：在xml语法约束下，省去了不必要条件判断。

 ==== 输出标签 ====
  * 示例
{{{
<c:out value="${ user.name} ">
}}}
  * value属性:
    El表达式,描述需要输出的文本
  * 功能:
    输出表达式值，但是*不编码*其xml标记。
  * 说明:
    与直接的表达式唯一的区别是：*不编码*。

==控制标签==
 ==== 条件标签 ====
  * 示例:
{{{
<c:if test="${index == 0}">[${index},</c:if>
<c:else-if test="${index == end}">${index}]</c:else-if>
<c:else>${index},</c:else>
}}}
 ==== 选择标签 ====
  * 示例:
{{{
<c:choose >
<c:when test="${type == 1}">分支1</c:when >
<c:when test="${type == 2}">分支2</c:when >
<c:otherwise>分支3</c:otherwise>
</c:choose >
}}}
  * 功能:
    选择第一个条件执行，如果没有命中，执行c:otherwise节点。
  * 说明:
    这一系列标签其实和if else系列等价，翻译后的目标代码也万全相同。他们的出现，只是为了更加清晰的语法表现手段，而非内核功能的增加。

 ==== 循环标签 ====
  * 示例:
{{{
<c:for var="item" items="${list}">
${for.index}:${item}.
</c:for>
<c:else>没有找到任何记录</c:else>
}}}
  * for标签属性：
    * _ var _：    字符串，且内容为JavaScript的合法变量名。 
    * _ items _ ： EL,迭代内容，可以是数组，或者java,util.Collection 实例。
    * _ status _： 可选属性，表示状态变量名，是该循环内for状态的别名。

  * 功能：
    对items表达式中的数据循环，将每个元素依次申明为var中制定的名称的变量。
  * for状态数据结构说明
{{{
{index:0,lastIndex:6}。
}}}
    循环过程中将维护for的状态（index属性），用户在循环体内使用${for.index}获取当前循环的重复次数（从0开始）。

  * else 标记说明：
    当其与for循环组合，当for循环执行0次后，与其配合的else节点可以执行（常见于做空循环的友好提示，如没有查询到任何数据）。


== 变量申明标签 ==
  ==== 通过属性值申明变量====
  {{{
<c:var name="myName" value="${user.name}" />
  }}}
    * 属性表：
      * _ name _: 变量名称。
      * _ value _： El表达式（非必要，若无，取子节点渲染数据）
    * 功能：
      定义变量，内容来自value属性。

  ==== 通过子节点申明变量====
    {{{
<c:var name="myName" >
${user.firstName} ${user.lastName}
</c:var>
    }}}
    * 功能：
      定义变量，变量名称是name属性，内容来自子节点输出的文本。

== 编译期标签 ==
  ==== 包含标签 ====
  * 示例：
  {{{
<c:include path="menu.xhtml"/>
<c:include path="controls.xhtml" xpath="//*[@id='pageList']"/>
<c:include path="#page" xpath="//xhtml:body"/>
  }}}
  * 属性表：
    * _ path _ ：字符串，可选，未指定时代表需要包含的文档为当前文档。可以是表示一个相对路径，也可以制定一个编译上文的变量（如，页面装饰其实现中，先将目标模板文档对象，作为编译上下文的#page变量，能后解析布局模板）
    * _ xpath _ ：字符串,可选，用于选取文档片段的xpath语句。

  * 功能：
    包含一个文档，或者文档片段。

  * 说明：
    xpath确实有点烦琐,但毕竟事标准，标准永远不是最好的，但他是可行的。